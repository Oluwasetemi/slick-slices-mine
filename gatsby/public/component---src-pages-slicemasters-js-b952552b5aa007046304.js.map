{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","base","skip","totalPages","Math","ceil","prevPage","hasPrevPage","nextPage","hasNextPage","title","disabled","to","className","Array","from","length","_","i","key","SlicemasterGrid","SlicemasterStyles","SlicemastersPage","data","pageContext","slicemasters","SEO","parseInt","process","nodes","map","person","slug","current","name","fluid","image","asset","description","query"],"mappings":"sPAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,gZA+BP,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,YAEAC,GACC,EAFDC,KAEC,EADDD,MAEME,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAcD,GAAY,EAC1BE,EAAWR,EAAc,EACzBS,EAAcD,GAAYL,EAChC,OACE,kBAACT,EAAD,KACE,kBAAC,IAAD,CACEgB,MAAM,YACNC,UAAWJ,EACXK,GAAOX,EAAL,IAAaK,GAEf,0BAAMO,UAAU,QAAhB,WAEDC,MAAMC,KAAK,CAAEC,OAAQb,IAAc,SAACc,EAAGC,GAAJ,OAClC,kBAAC,IAAD,CACEL,UAA2B,IAAhBb,GAA2B,IAANkB,EAAU,UAAY,GACtDN,GAAOX,EAAL,KAAaiB,EAAI,EAAIA,EAAI,EAAI,IAC/BC,IAAG,QAASD,EAAI,IAEfA,EAAI,MAGT,kBAAC,IAAD,CACER,MAAM,YACNC,UAAWF,EACXG,GAAOX,EAAL,IAAaO,GAEf,0BAAMK,UAAU,QAAhB,Y,gBC/DFO,EAAkBzB,IAAOC,IAAV,oFAAGD,CAAH,2FAMf0B,EAAoB1B,IAAOC,IAAV,sFAAGD,CAAH,yTA0BR,SAAS2B,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACvCC,EAAiBF,EAAjBE,aACR,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKhB,MAAK,qBAAuBc,EAAYxB,YAAnC,UACV,kBAACH,EAAD,CACEC,SAAU6B,SAASC,KACnB7B,WAAY0B,EAAa1B,WACzBG,KAAMsB,EAAYtB,KAClBF,YAAawB,EAAYxB,aAAe,EACxCC,KAAK,kBAEP,kBAACmB,EAAD,KACGK,EAAaI,MAAMC,KAAI,SAACC,EAAQb,GAAT,OACtB,kBAACG,EAAD,CAAmBF,IAAKD,GACtB,kBAAC,IAAD,CAAMN,GAAE,gBAAkBmB,EAAOC,KAAKC,SACpC,4BACE,0BAAMpB,UAAU,QAAQkB,EAAOG,QAGnC,kBAAC,IAAD,CAAKC,MAAOJ,EAAOK,MAAMC,MAAMF,QAC/B,uBAAGtB,UAAU,eAAekB,EAAOO,mBAQxC,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-b952552b5aa007046304.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-items: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0;\n  border-radius: 5px;\n  text-align: center;\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    border-right: 1px solid var(--grey);\n    text-decoration: none;\n    &[aria-current],\n    &.current {\n      color: var(--red);\n    }\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n  @media (max-width: 800px) {\n    .word {\n      display: none;\n    }\n    font-size: 1.4rem;\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  totalCount,\n  currentPage,\n  skip,\n  base,\n}) {\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const hasPrevPage = prevPage >= 1;\n  const nextPage = currentPage + 1;\n  const hasNextPage = nextPage <= totalPages;\n  return (\n    <PaginationStyles>\n      <Link\n        title=\"Prev Page\"\n        disabled={!hasPrevPage}\n        to={`${base}/${prevPage}`}\n      >\n        <span className=\"word\">← Prev</span>\n      </Link>\n      {Array.from({ length: totalPages }, (_, i) => (\n        <Link\n          className={currentPage === 1 && i === 0 ? 'current' : ''}\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n          key={`page${i + 1}`}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link\n        title=\"Next Page\"\n        disabled={!hasNextPage}\n        to={`${base}/${nextPage}`}\n      >\n        <span className=\"word\">Next →</span>\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Pagination from '../components/Pagination';\nimport SEO from '../components/SEO';\n\nconst SlicemasterGrid = styled.div`\n  display: grid;\n  grid-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n`;\n\nconst SlicemasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    text-align: center;\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    position: relative;\n    z-index: 2;\n  }\n  .description {\n    background-color: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    z-index: 2;\n    position: relative;\n    transform: rotate(1deg);\n  }\n`;\n\nexport default function SlicemastersPage({ data, pageContext }) {\n  const { slicemasters } = data;\n  return (\n    <>\n      <SEO title={`Slicemaster -Page ${pageContext.currentPage} || 1`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        totalCount={slicemasters.totalCount}\n        skip={pageContext.skip}\n        currentPage={pageContext.currentPage || 1}\n        base=\"/slicemasters\"\n      />\n      <SlicemasterGrid>\n        {slicemasters.nodes.map((person, i) => (\n          <SlicemasterStyles key={i}>\n            <Link to={`/slicemaster/${person.slug.current}`}>\n              <h2>\n                <span className=\"mark\">{person.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={person.image.asset.fluid} />\n            <p className=\"description\">{person.description}</p>\n          </SlicemasterStyles>\n        ))}\n      </SlicemasterGrid>\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        description\n        id\n        name\n        slug {\n          current\n        }\n        image {\n          asset {\n            fluid(maxWidth: 400) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}